name: Playwright Parallel Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    types: [opened, synchronize, closed]
    branches: [ main, master ]
  workflow_dispatch:
jobs:
  test-parallel:
    strategy:
      matrix:
        worker: [1,2,3,4]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - uses: actions/cache@v3
        id: playwright-cache
        with:
          path: '~/.cache/ms-playwright'
          key: '${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}'
          # As a fallback, if the Playwright version has changed, try use the
          # most recently cached version. There's a good chance that at least one
          # of the browser binary versions haven't been updated, so Playwright can
          # skip installing that in the next step.
          # Note: When falling back to an old cache, `cache-hit` (used below)
          # will be `false`. This allows us to restore the potentially out of
          # date cache, but still let Playwright decide if it needs to download
          # new binaries or not.
          restore-keys: |
            ${{ runner.os }}-playwright-
      # If the Playwright browser binaries weren't able to be restored, we tell
      # paywright to install everything for us.
    - name: Install Playwright Browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      env:
        USERNAME: ${{ secrets.USERNAME }}
        PASSWORD: ${{ secrets.PASSWORD }}
      run: npx playwright test --shard=${{ matrix.worker }}/4
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report-parallel
        path: playwright-report/
        retention-days: 30
